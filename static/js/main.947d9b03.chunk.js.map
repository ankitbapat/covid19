{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","style","borderRadius","textAlign","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","fontWeight","variant","value","Date","toDateString","url","fetchData","country","a","changeableURl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","backgroundColor","options","legend","display","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","default","onChange","e","target","i","key","App","state","fetchdata","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,2MC+CpJC,EAzCD,SAAC,GAA6D,IAAD,IAA1DC,KAAQC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,WAEnD,OAAIH,EAEA,yBAAKI,UAAWC,IAAOC,WACnB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAU,UAClC,kBAACF,EAAA,EAAD,CAAMG,MAAO,CAACC,aAAc,MAAOC,UAAU,UAAWC,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGb,UAAac,IAAGb,IAAOc,KAAMd,IAAOe,WAC7H,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,GAAhD,YACA,kBAACF,EAAA,EAAD,CAAYZ,MAAQ,CAACa,MAAO,UAAWE,WAAY,QAASC,QAAU,MAAO1B,EAAU2B,OAGvF,kBAACL,EAAA,EAAD,CAAYC,MAAQ,iBAAkB,IAAIK,KAAKzB,GAAY0B,kBAInE,kBAACtB,EAAA,EAAD,CAAMG,MAAO,CAACC,aAAc,MAAOC,UAAU,UAAWC,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGb,UAAac,IAAGb,IAAOc,KAAMd,IAAOJ,YAC7H,kBAACoB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,GAAhD,aACA,kBAACF,EAAA,EAAD,CAAYZ,MAAQ,CAACa,MAAO,UAAWE,WAAY,QAASC,QAAU,MAAMzB,EAAU0B,OAGtF,kBAACL,EAAA,EAAD,CAAYC,MAAQ,iBAAkB,IAAIK,KAAKzB,GAAY0B,kBAInE,kBAACtB,EAAA,EAAD,CAAMG,MAAO,CAACC,aAAc,MAAOC,UAAU,UAAWC,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGb,UAAac,IAAGb,IAAOc,KAAMd,IAAOH,SAC7H,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,GAAhD,UACA,kBAACF,EAAA,EAAD,CAAaZ,MAAQ,CAACa,MAAO,UAAWE,WAAY,QAASC,QAAU,MAAMxB,EAAOyB,OAGpF,kBAACL,EAAA,EAAD,CAAYC,MAAQ,iBAAkB,IAAIK,KAAKzB,GAAY0B,oBA9BxD,a,yBCPrBC,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAgBJ,EAEjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJnB,kBAQqDG,IAAMC,IAAIF,GAR/D,2BAQRnC,KAAQC,EARA,EAQAA,UAAWC,EARX,EAQWA,UAAWC,EARtB,EAQsBA,OAAQC,EAR9B,EAQ8BA,WAR9B,kBASV,CAAEH,YAAWC,YAAWC,SAAQC,eATtB,kCAYjBkC,QAAQC,IAAR,MAZiB,0DAAH,sDAgBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAEEE,IAAMC,IAAN,UAAaN,EAAb,WAFF,uBAEb/B,EAFa,EAEbA,KACHyC,EAAezC,EAAK0C,KAAI,SAACC,GAAD,MAAgB,CAC1C1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAMF,EAAUG,eANE,kBAQfL,GARe,gCAWtBH,QAAQC,IAAR,MAXsB,yDAAH,qDAedQ,EAAc,uCAAG,8BAAAb,EAAA,+EAEeE,IAAMC,IAAN,UAAaN,EAAb,eAFf,uBAENiB,EAFM,EAEbhD,KAAOgD,UAFM,kBAGfA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SAHpB,gCAMtBX,QAAQC,IAAR,MANsB,yDAAH,qD,yBC0BZW,EAxDD,SAAC,GAAqB,IAApBlD,EAAmB,EAAnBA,KAAmB,KAAbiC,QACgBkB,mBAAS,KADZ,mBACbC,GADa,WAE/BC,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACbkB,EADa,SACOZ,IADP,6EAAH,qDAGdc,KACD,IAsBH,IAAMC,EACFvD,EAAKC,UACD,kBAAC,IAAD,CACID,KAAQ,CACJwD,OAAO,CAAC,WAAY,YAAa,UACjCC,SAAU,CAAC,CAEPC,gBAAiB,CAAC,UAAU,UAAU,WACtC1D,KAAM,CAACA,EAAKC,UAAU2B,MAAO5B,EAAKE,UAAU0B,MAAO5B,EAAKG,OAAOyB,UAGvE+B,QAAS,CACLC,OAAQ,CAAEC,SAAS,MAI5B,KAGP,OACI,yBAAKxD,UAAWC,IAAOC,WAElBgD,I,mCC9BEO,EArBO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EACGZ,mBAAS,IADZ,mBACtCa,EADsC,KACpBC,EADoB,KAS7C,OAPAZ,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACb+B,EADa,SACclB,IADd,6EAAH,qDAGdO,KACD,CAACW,IAGA,kBAACC,EAAA,EAAD,CAAa7D,UAAWC,IAAO6D,aAC3B,kBAACC,EAAA,EAAD,CAAcC,QAAQ,GAAGC,SAAU,SAACC,GAAD,OAAMR,EAAoBQ,EAAEC,OAAO5C,SAGhEoC,EAAiBtB,KAAK,SAACT,EAASwC,GAAV,OAAgB,4BAAQC,IAAKD,EAAG7C,MAAOK,GAAUA,S,iBCc1E0C,E,4MA1BXC,MAAQ,CACJ5E,KAAM,GACNiC,QAAS,I,EAOb8B,oB,uCAAsB,WAAO9B,GAAP,eAAAC,EAAA,sEACMF,EAAUC,GADhB,OACZ4C,EADY,OAElB,EAAKC,SAAS,CAAE9E,KAAM6E,EAAW5C,QAASA,IAC1CK,QAAQC,IAAIsC,GAHM,2C,wPAHM7C,I,OAAlB6C,E,OACNE,KAAKD,SAAS,CAAE9E,KAAM6E,I,qIAOhB,IAAD,EACqBE,KAAKH,MAAvB5E,EADH,EACGA,KAAMiC,EADT,EACSA,QACd,OACI,yBAAK5B,UAAWC,IAAOC,WAEnB,kBAAC,EAAD,CAAOP,KAAQA,IACf,kBAAC,EAAD,CAAe+D,oBAAuBgB,KAAKhB,sBAC3C,kBAAC,EAAD,CAAO/D,KAAMA,EAAMiC,QAASA,S,GAtB1B+C,IAAMC,WCFxBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,U,mBCHhDxF,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB","file":"static/js/main.947d9b03.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport styles from './Cards.module.css';\n\nimport cx from 'classnames';\n\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } } ) => {\n\n    if(!confirmed) {return 'Loading..'}\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify = \"center\">\n                <Grid style={{borderRadius: '50%', textAlign:'center'}} item component={Card} xs={12} md={3} className = {cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography style= {{color: '#0177b5', fontWeight: 'bold'}} variant = \"h7\" >{confirmed.value}\n                            {/* <CountUp start = {0} end = {confirmed.value} duration = {2} separator = \",\"/> */}\n                        </Typography>\n                        <Typography color = \"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\n                        {/* <Typography variant = \"body2\">Number of active cases of COVID-19</Typography> */}\n                    </CardContent>\n                </Grid>\n                <Grid style={{borderRadius: '50%', textAlign:'center'}} item component={Card} xs={12} md={3} className = {cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography style= {{color: '#2f7b15', fontWeight: 'bold'}} variant = \"h7\">{recovered.value}\n                            {/* <CountUp start = {0} end = {recovered.value} duration = {2} separator = \",\"/> */}\n                        </Typography>\n                        <Typography color = \"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\n                        {/* <Typography variant = \"body2\">Number of recoveries from COVID-19</Typography> */}\n                    </CardContent>\n                </Grid>\n                <Grid style={{borderRadius: '50%', textAlign:'center'}} item component={Card} xs={12} md={3} className = {cx(styles.card, styles.deaths)} >\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography  style= {{color: '#d11024', fontWeight: 'bold'}} variant = \"h7\">{deaths.value}\n                            {/* <CountUp start = {0} end = {deaths.value} duration = {2} separator = \",\"/> */}\n                        </Typography>\n                        <Typography color = \"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\n                        {/* <Typography variant = \"body2\">Number of deaths caused by COVID-19</Typography> */}\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n    let changeableURl = url;\n    \n    if(country) {\n        changeableURl = `${url}/countries/${country}`\n    }\n\n    try{\n        const  { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    }\n    catch(error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try{\n        const  { data } = await axios.get(`${url}/daily`); //data is in an array\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }))\n        return modifiedData;\n    }\n    catch(error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async() => {\n    try {\n        const  { data: {countries} } = await axios.get(`${url}/countries`); //data is in an array\n        return countries.map((country) => country.name);\n    }\n    catch(error) {\n        console.log(error);\n    }\n}","import React, {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({data, country}) => {\n    const [dailyData, setDailyData] = useState([]); //hooks; dailyData is same as state object with a data object inside it.\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData( await fetchDailyData() );\n        }\n        fetchAPI();\n    }, []);\n    // const lineChart = (\n    //     dailyData.length ? (\n    //     <Line\n    //         data = {{\n    //             labels: dailyData.map(({ date }) => date),\n    //             datasets: [{\n    //                 data: dailyData.map(({ confirmed }) => confirmed),\n    //                 label: 'Infected',\n    //                 borderColor: '#3333ff',\n    //                 fill: true,\n    //             }, {\n    //                 data: dailyData.map(({ deaths }) => deaths),\n    //                 label: 'Deaths',\n    //                 borderColor: 'red',\n    //                 backgroundColor: 'rgba(255,0,0,0.5)',\n    //                 fill: true,\n    //             }],\n    //         }}\n    //     />) : null\n    // );\n\n    const barChart = (\n        data.confirmed ? (\n            <Bar\n                data = {{\n                    labels:['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        // label: 'People',\n                        backgroundColor: ['#0177b5','#2f7b15','#d11024'],\n                        data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n                    }]\n                }}\n                options={{\n                    legend: { display: false },\n                    // title: { display: true, text:`Current state in ${country}` },\n                }}\n            />\n        ): null\n    );\n\n    return (\n        <div className={styles.container}>\n            {/* {country ? barChart : lineChart} */}\n            {barChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries( await fetchCountries() );\n        }\n        fetchAPI();\n    }, [setFetchedCountries] ); // the value will change only when setfetchedCountries changes that is why we added the second parameter\n    // console.log(fetchedCountries);\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect default=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\n                {/* <option value=\"\">Global</option> */}\n                \n                { fetchedCountries.map( (country, i) => <option key={i} value={country}>{country}</option> ) }\n                \n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\nimport { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\n\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount () {\n        const fetchdata = await fetchData();\n        this.setState({ data: fetchdata});\n    }\n    handleCountryChange = async (country) => {\n        const fetchdata = await fetchData(country);\n        this.setState({ data: fetchdata, country: country });\n        console.log(fetchdata);\n    }\n    render() {\n        const { data, country } = this.state;\n        return(\n            <div className={styles.container}>\n                {/* <img className={styles.image} src={covidImage} alt=\"covid19\"/> */}\n                <Cards data = {data}/>\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}